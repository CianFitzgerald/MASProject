agent Vacuum {
    module Console C;
    module System S;
	module Math M;
	module EIS ei;
    module Debug debug;
	module arrayModule arrayMod;
	module sortingModule sortModule;
	module directionsModule dirModule;
	module dustCountModule dustModule;
    module perceptGather percepts;

    // Main rule which launches and joins the environment and links the specified sub-agent
    // Agent will continue to move and clean until all dust has been gathered

    rule +!main([string name]) {
        ei.launch("vw","dependency/vacuumworld-1.2.0.jar");
        ei.join();
        ei.link(name); 
        while (dustModule.getCount() <= 32){

            //while loop to ensure that the agent only triggers the move rule once the percepts have been gathered 

            while (percepts.getPercept(name) == false){
                !move(name);
                S.sleep(3000);
                percepts.setPercept(name, true);
            }
        }
    }
    
    // move rule which moves the bot 1 space in the specified direction and then cleans if necessary

	rule +!move(string botname) {
        //retrieving the direction from the direction module using getDir 

        string dir = dirModule.getDir(botname);
        ei.move(dir, 1);
        ei.clean();
	}

    // Event rule which listens to the changes in the environment 

	rule +$ei.event(location(int x, int y)) : ei.direction(string dir) & ei.square(string square, string contents){
        //retieving the bots name  

		string botname = S.name();
		C.println(botname + " is now in location " + x + ", " + y +  " facing " + dir);

        // converting x and y coordinates to usable integers

		int int_x = M.intValue(x + "");
		int int_y = M.intValue(y + "");

        // adding 1 to the square the bot has moved to 

        C.println("adding square to array");
		arrayMod.add(int_x, int_y);

        // adding 1 to the dust count if the square is dusty

		if (ei.square("here","dust")) {
			dustModule.plus();
		}

        // checking which direction the bot is facing in order to decide on next direction to move.

		if (dir=="north"){

            C.println("facing north");

            // retrieving coordinates of surrounding squares and checking the visit count to each using the check method from the array module 
            // if the surrounding square is an obstacle or vacuum the visit count is set to 1000 such that the bot won't move to those squares
            // otherwise if the square is empty the visit count is retrieved using the check method

            int northForwardX = int_x;
            int northForwardY = int_y - 1;
            int northForward;
            if(ei.square("forward","obstacle") | ei.square("forward","vac")){
                northForward = 1000;
            }else{
                northForward = arrayMod.check(northForwardX, northForwardY);
            }

            int northLeftX = int_x - 1;
            int northLeftY = int_y;
            int northLeft;
            if(ei.square("left","obstacle") | ei.square("left","vac")){
                northLeft = 1000;
            }else{
                northLeft = arrayMod.check(northLeftX, northLeftY);
            }

            int northRightX = int_x + 1;
            int northRightY = int_y;
            int northRight;
            if(ei.square("right","obstacle") | ei.square("right","vac")){
                northRight = 1000;
            }else{
                northRight = arrayMod.check(northRightX, northLeftY);
            }

            // not possible to check the contents of square behind the bot, so just the check method is used here
            
            int northBackX = int_x;
            int northBackY = int_y + 1;
            int northBack = arrayMod.check(northBackX, northBackY);

            // determining which square has the lowest number of visits

            string lowest = sortModule.sort(northForward, northLeft, northRight, northBack);
            C.println("setting direction now: " + lowest);

            //  setting the direction for the bot to move next 

            dirModule.setDir(lowest, botname);

        }   

        // same methodology as above but for bots facing east 

        else if (dir == "east"){

            C.println("facing east");

            int eastForwardX = int_x + 1;
            int eastForwardY = int_y;
            int eastForward;
            if(ei.square("forward","obstacle") | ei.square("forward","vac")){
                eastForward = 1000;
            }else{
                eastForward = arrayMod.check(eastForwardX, eastForwardY);
            }
            
            int eastLeftX = int_x;
            int eastLeftY = int_y - 1;
            int eastLeft;
            if(ei.square("left","obstacle") | ei.square("left","vac")){
                eastLeft = 1000;
            }else{
                eastLeft = arrayMod.check(eastLeftX, eastLeftY);
            }
            
            int eastRightX = int_x;
            int eastRightY = int_y + 1;
            int eastRight;
            if(ei.square("right","obstacle") | ei.square("right","vac")){
                eastRight = 1000;
            }else{
                eastRight = arrayMod.check(eastRightX, eastRightY);
            }
            
            int eastBackX = int_x - 1;
            int eastBackY = int_y;
            int eastBack = arrayMod.check(eastBackX, eastBackY);

            string lowest = sortModule.sort(eastForward,eastLeft,eastRight,eastBack);
            C.println("setting direction now: " + lowest);
            dirModule.setDir(lowest, botname);
        }

        // same methodology as above but for bots facing south

        else if (dir == "south"){
            C.println("facing south");

            int southForwardX = int_x;
            int southForwardY = int_y + 1;
            int southForward;
            if(ei.square("forward","obstacle") | ei.square("forward","vac")){
                southForward = 1000;
            }else{
                southForward = arrayMod.check(southForwardX, southForwardY);
            }
            
            int southLeftX = int_x + 1;
            int southLeftY = int_y;
            int southLeft;
            if(ei.square("left","obstacle") | ei.square("left","vac")){
                southLeft = 1000;
            }else{
                southLeft = arrayMod.check(southLeftX, southLeftY);
            }
            
            int southRightX = int_x - 1;
            int southRightY = int_y;
            int southRight;
            if(ei.square("right","obstacle") | ei.square("right","vac")){
                southRight = 1000;
            }else{
                southRight = arrayMod.check(southRightX, southRightY);
            }
            
            int southBackX = int_x;
            int southBackY = int_y - 1;
            int southBack = arrayMod.check(southBackX, southBackY);

            string lowest = sortModule.sort(southForward, southLeft, southRight, southBack);
            C.println("setting direction now: " + lowest);
            dirModule.setDir(lowest, botname);
        }

        // same methodology as above but for bots facing west

        else {
            C.println("facing west");

            int westForwardX = int_x - 1;
            int westForwardY = int_y;
            int westForward;
            if(ei.square("forward","obstacle") | ei.square("forward","vac")){
                westForward = 1000;
            }else{
                westForward = arrayMod.check(westForwardX, westForwardY);
            }
            
            int westLeftX = int_x;
            int westLeftY = int_y + 1;
            int westLeft;
            if(ei.square("left","obstacle") | ei.square("left","vac")){
                westLeft = 1000;
            }else{
                westLeft = arrayMod.check(westLeftX, westLeftY);
            }
            
            int westRightX = int_x;
            int westRightY = int_y - 1;
            int westRight;
            if(ei.square("right","obstacle") | ei.square("right","vac")){
                westRight = 1000;
            }else{
                westRight = arrayMod.check(westRightX, westRightY);
            }
            
            int westBackX = int_x + 1;
            int westBackY = int_y;
            int westBack = arrayMod.check(westBackX, westBackY);
        
            string lowest = sortModule.sort(westForward, westLeft, westRight, westBack);
            C.println("setting direction now: " + lowest);
            dirModule.setDir(lowest, botname);
        }

        // setting boolean value for specified bot back to false in order to trigger move rule in main

        percepts.setPercept(botname, false);
	}
}


