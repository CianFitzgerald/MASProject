agent Main {
    module Console C;
    module System S;
	module EIS ei;
    module Debug debug;
	module arrayModule myModule;
	module sortingModule sortModule;

	rule +!main(list args) {
		// start environment
		ei.launch("vw","dependency/vacuumworld-1.2.0.jar");
		ei.init([generation("no")]);
		// links agent to the environment
		ei.join();
		ei.startEnv();

		list E = ei.freeEntities();
		forall(string ent : E) {
			C.println("E="+E);
		}

		string henDirection = "north";
		string decDirection = "north";
		string lloDirection = "north";
		string harDirection = "north";

		string tempDirection = "north";

		//while (~ei.location(0, 0)) {
			!henry();
			//!decco();
			//!lloyd();
			//!harry();
		//}
		
		
	}


	rule +$ei.event(location(int x, int y)) {
		C.println("Now in location " + x + ", " + y);
		!declare(x, y);
	}

	rule +!declare(int x, int y) : ei.direction("north") {
		C.println("north");
		int northForwardX = x;
		int northForwardY = y - 1;
		int northForward = myModule.check(northForwardX, northForwardY);
		C.println(northForward);

		int northLeftX = x - 1;
		int northLeftY = y;
		int northLeft = myModule.check(northLeftX, northLeftY);
		C.println(northLeft);

		int northRightX = x + 1;
		int northRightY = y;
		int northRight = myModule.check(northRightX, northLeftY);
		C.println(northRight);

		int lowest = sortModule.sort(northForward, northLeft, northRight);

		if (lowest == northForward) {
			tempDirection = "forward";
		}
		if (lowest == northLeft) {
			tempDirection = "left";
		}
		if (lowest == northRight) {
			tempDirection = "right";
		}
	}

	rule +!declare(int x, int y) : ei.direction("east") {
		C.println("east");
		int eastForwardX = x + 1;
		int eastForwardY = y;
		int eastForward = myModule.check(eastForwardX, eastForwardY);
		C.println(eastForward);

		int eastLeftX = x;
		int eastLeftY = y - 1;
		int eastLeft = myModule.check(eastLeftX, eastLeftY);
		C.println(eastLeft);

		int eastRightX = x;
		int eastRightY = y + 1;
		int eastRight = myModule.check(eastRightX, eastRightY);
		C.println(eastRight);

		if (lowest == eastForward) {
			tempDirection = "forward";
		}
		if (lowest == eastLeft) {
			tempDirection = "left";
		}
		if (lowest == eastRight) {
			tempDirection = "right";
		}
	}

	rule +!declare(int x, int y) : ei.direction("south") {
		C.println("south");
		int southForwardX = x;
		int southForwardY = y + 1;
		int southForward = myModule.check(southForwardX, southForwardY);
		C.println(southForward);

		int southLeftX = x + 1;
		int southLeftY = y;
		int southLeft = myModule.check(southLeftX, southLeftY);
		C.println(southLeft);

		int southRightX = x - 1;
		int southRightY = y;
		int southRight = myModule.check(southRightX, southRightY);
		C.println(southRight);

		if (lowest == southForward) {
			tempDirection = "forward";
		}
		if (lowest == southLeft) {
			tempDirection = "left";
		}
		if (lowest == southRight) {
			tempDirection = "right";
		}
	}

	rule +!declare(int x, int y) : ei.direction("west") {
		C.println("west");
		int westForwardX = x - 1;
		int westForwardY = y;
		int westForward = myModule.check(westForwardX, westForwardY);
		C.println(westForward);

		int westLeftX = x;
		int westLeftY = y + 1;
		int westLeft = myModule.check(westLeftX, westLeftY);
		C.println(westLeft);

		int westRightX = x;
		int westRightY = y - 1;
		int westRight = myModule.check(westRightX, westRightY);
		C.println(westRight);

		if (lowest == westForward) {
			tempDirection = "forward";
		}
		if (lowest == westLeft) {
			tempDirection = "left";
		}
		if (lowest == westRight) {
			tempDirection = "right";
		}
	}

	rule +!henry() {
		harDirection = tempDirection;
		ei.link("Henry");
		ei.move(henDirection, 1);
		S.sleep(500);
	}

	rule +!decco() {
		henDirection = tempDirection;
		ei.link("Decco");
		ei.move(decDirection, 1);
		S.sleep(500);
	}

	rule +!lloyd() {
		decDirection = tempDirection;
		ei.link("Lloyd");
		ei.move(lloDirection, 1);
		S.sleep(500);
	}
	rule +!harry() {
		lloDirection = tempDirection;
		ei.link("Harry");
		ei.move(harDirection, 1);
		S.sleep(500);
	}

}
