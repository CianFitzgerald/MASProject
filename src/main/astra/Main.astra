agent Main {
    module Console C;
    module System S;
	module Math M;
	module EIS ei;
    module Debug debug;
	module arrayModule myModule;
	module sortingModule sortModule;
	module directionsModule dirModule;

	rule +!main(list args) {
		// start environment
		ei.launch("vw","dependency/vacuumworld-1.2.0.jar");
		ei.init([generation("no")]);
		// links agent to the environment
		ei.join();
		ei.startEnv();

		list E = ei.freeEntities();
		forall(string ent : E) {
			C.println("E="+E);
		}

		ei.link("Harry");


		while (~ei.location(0, 0)) {
			!henry();
			!decco();
			!lloyd();
			!harry();
		}
	}


	rule +$ei.event(location(int x, int y)) {
		C.println("Now in location " + x + ", " + y);
		int int_x = M.intValue(x + "");
		int int_y = M.intValue(y + "");
		myModule.add(int_x, int_y);
		!declare(x, y);
	}

	rule +!declare(int x, int y) : ei.direction("north") {
		C.println("This here says " + x + " " + y);
		C.println("north");
		int int_x = M.intValue(x + "");
		int int_y = M.intValue(y + "");

		int northForwardX = int_x;
		int northForwardY = int_y - 1;
		int northForward = myModule.check(northForwardX, northForwardY);
		C.println(northForward);

		int northLeftX = int_x - 1;
		int northLeftY = int_y;
		int northLeft = myModule.check(northLeftX, northLeftY);
		C.println(northLeft);

		int northRightX = int_x + 1;
		int northRightY = int_y;
		int northRight = myModule.check(northRightX, northLeftY);
		C.println(northRight);

		int lowest = sortModule.sort(northForward, northLeft, northRight);

		if (lowest == northForward) {
			dirModule.setTemp("forward");
		}
		if (lowest == northLeft) {
			dirModule.setTemp("left");
		}
		if (lowest == northRight) {
			dirModule.setTemp("right");
		}
	}

	rule +!declare(int x, int y) : ei.direction("east") {
		C.println("This here says " + x + " " + y);
		C.println("east");
		int int_x = M.intValue(x + "");
		int int_y = M.intValue(y + "");

		int eastForwardX = int_x + 1;
		int eastForwardY = int_y;
		int eastForward = myModule.check(eastForwardX, eastForwardY);
		C.println(eastForward);

		int eastLeftX = int_x;
		int eastLeftY = int_y - 1;
		int eastLeft = myModule.check(eastLeftX, eastLeftY);
		C.println(eastLeft);

		int eastRightX = int_x;
		int eastRightY = int_y + 1;
		int eastRight = myModule.check(eastRightX, eastRightY);
		C.println(eastRight);

		int lowest = sortModule.sort(eastForward, eastLeft, eastRight);

		if (lowest == eastForward) {
			dirModule.setTemp("forward");
		}
		if (lowest == eastLeft) {
			dirModule.setTemp("left");
		}
		if (lowest == eastRight) {
			dirModule.setTemp("right");
		}
	}

	rule +!declare(int x, int y) : ei.direction("south") {
		C.println("This here says " + x + " " + y);
		C.println("south");
		int int_x = M.intValue(x + "");
		int int_y = M.intValue(y + "");

		int southForwardX = int_x;
		int southForwardY = int_y + 1;
		int southForward = myModule.check(southForwardX, southForwardY);
		C.println(southForward);

		int southLeftX = int_x + 1;
		int southLeftY = int_y;
		int southLeft = myModule.check(southLeftX, southLeftY);
		C.println(southLeft);

		int southRightX = int_x - 1;
		int southRightY = int_y;
		int southRight = myModule.check(southRightX, southRightY);
		C.println(southRight);

		int lowest = sortModule.sort(southForward, southLeft, southRight);

		if (lowest == southForward) {
			dirModule.setTemp("forward");
		}
		if (lowest == southLeft) {
			dirModule.setTemp("left");
		}
		if (lowest == southRight) {
			dirModule.setTemp("right");
		}
	}

	rule +!declare(int x, int y) : ei.direction("west") {
		C.println("west");
		C.println("This here says " + x + " " + y);
		int int_x = M.intValue(x + "");
		int int_y = M.intValue(y + "");

		int westForwardX = int_x - 1;
		int westForwardY = int_y;
		int westForward = myModule.check(westForwardX, westForwardY);
		C.println(westForward);

		int westLeftX = int_x;
		int westLeftY = int_y + 1;
		int westLeft = myModule.check(westLeftX, westLeftY);
		C.println(westLeft);

		int westRightX = int_x;
		int westRightY = int_y - 1;
		int westRight = myModule.check(westRightX, westRightY);
		C.println(westRight);

		int lowest = sortModule.sort(westForward, westLeft, westRight);

		if (lowest == westForward) {
			dirModule.setTemp("forward");
		}
		if (lowest == westLeft) {
			dirModule.setTemp("left");
		}
		if (lowest == westRight) {
			dirModule.setTemp("right");
		}
	}

	rule +!henry() {
		string var = dirModule.getTemp();
		dirModule.setHarry();
		string dir = dirModule.getHenry();
		ei.link("Henry");
		ei.move(dir, 1);
		S.sleep(500);
	}

	rule +!decco() {
		string var = dirModule.getTemp();
		dirModule.setHenry();
		string dir = dirModule.getDecco();
		ei.link("Decco");
		ei.move(dir, 1);
		S.sleep(500);
	}

	rule +!lloyd() {
		string var = dirModule.getTemp();
		dirModule.setDecco();
		string dir = dirModule.getLloyd();
		ei.link("Lloyd");
		ei.move(dir, 1);
		S.sleep(500);
	}
	rule +!harry() {
		string var = dirModule.getTemp();
		dirModule.setLloyd();
		string dir = dirModule.getHarry();
		ei.link("Harry");
		ei.move(dir, 1);
		S.sleep(500);
	}

}