agent Main {
    module Console C;
    module System S;
	module Math M;
	module EIS ei;
    module Debug debug;
	module arrayModule myModule;
	module sortingModule sortModule;
	module directionsModule dirModule;
	module dustCountModule dustModule;

	rule +!main(list args) {
		// start environment
		ei.launch("vw","dependency/vacuumworld-1.2.0.jar");
		ei.init([generation("no")]);
		// links agent to the environment
		ei.join();
		ei.startEnv();

		list E = ei.freeEntities();
		forall(string ent : E) {
			C.println("E="+E);
		}

		while (dustModule.getCount() <= 32) {
			C.println("Dust Count " + dustModule.getCount());
			!henry();
			!decco();
			!lloyd();
			!harry();
		}
	}

	rule +$ei.event(location(int x, int y)) {
		C.println("Now in location " + x + ", " + y);
		int int_x = M.intValue(x + "");
		int int_y = M.intValue(y + "");
		myModule.add(int_x, int_y);
		if (ei.square("here", "dust")) {
			dustModule.plus();
		}
		ei.clean();
		!declare(x, y);
	}

	rule +!declare(int x, int y) : ei.direction("north") {

		int int_x = M.intValue(x + "");
		int int_y = M.intValue(y + "");

		int northForwardX = int_x;
		int northForwardY = int_y - 1;
		int northForward = myModule.check(northForwardX, northForwardY);

		int northLeftX = int_x - 1;
		int northLeftY = int_y;
		int northLeft = myModule.check(northLeftX, northLeftY);

		int northRightX = int_x + 1;
		int northRightY = int_y;
		int northRight = myModule.check(northRightX, northLeftY);

		int northBackX = int_x;
		int northBackY = int_y - 1;
		int northBack = myModule.check(northBackX, northBackY);

		string lowest = sortModule.sort(northForward, northLeft, northRight, northBack);
		dirModule.setTemp(lowest);

	}

	rule +!declare(int x, int y) : ei.direction("east") {

		int int_x = M.intValue(x + "");
		int int_y = M.intValue(y + "");

		int eastForwardX = int_x + 1;
		int eastForwardY = int_y;
		int eastForward = myModule.check(eastForwardX, eastForwardY);

		int eastLeftX = int_x;
		int eastLeftY = int_y - 1;
		int eastLeft = myModule.check(eastLeftX, eastLeftY);

		int eastRightX = int_x;
		int eastRightY = int_y + 1;
		int eastRight = myModule.check(eastRightX, eastRightY);

		int eastBackX = int_x - 1;
		int eastBackY = int_y;
		int eastBack = myModule.check(eastBackX, eastBackY);

		string lowest = sortModule.sort(eastForward, eastLeft, eastRight, eastBack);

		dirModule.setTemp(lowest);
	}

	rule +!declare(int x, int y) : ei.direction("south") {
		int int_x = M.intValue(x + "");
		int int_y = M.intValue(y + "");

		int southForwardX = int_x;
		int southForwardY = int_y + 1;
		int southForward = myModule.check(southForwardX, southForwardY);

		int southLeftX = int_x + 1;
		int southLeftY = int_y;
		int southLeft = myModule.check(southLeftX, southLeftY);

		int southRightX = int_x - 1;
		int southRightY = int_y;
		int southRight = myModule.check(southRightX, southRightY);

		int southBackX = int_x;
		int southBackY = int_y - 1;
		int southBack = myModule.check(southBackX, southBackY);

		string lowest = sortModule.sort(southForward, southLeft, southRight, southBack);

		dirModule.setTemp(lowest);

	}

	rule +!declare(int x, int y) : ei.direction("west") {
		int int_x = M.intValue(x + "");
		int int_y = M.intValue(y + "");

		int westForwardX = int_x - 1;
		int westForwardY = int_y;
		int westForward = myModule.check(westForwardX, westForwardY);

		int westLeftX = int_x;
		int westLeftY = int_y + 1;
		int westLeft = myModule.check(westLeftX, westLeftY);

		int westRightX = int_x;
		int westRightY = int_y - 1;
		int westRight = myModule.check(westRightX, westRightY);

		int westBackX = int_x - 1;
		int westBackY = int_y;
		int westBack = myModule.check(westBackX, westBackY);

		string lowest = sortModule.sort(westForward, westLeft, westRight, westBack);

		dirModule.setTemp(lowest);
	}

	rule +!henry() {
		string var = dirModule.getTemp();
		dirModule.setHarry();
		string dir = dirModule.getHenry();
		ei.link("Henry");
		ei.move(dir, 1);
		S.sleep(500);
	}

	rule +!decco() {
		string var = dirModule.getTemp();
		dirModule.setHenry();
		string dir = dirModule.getDecco();
		ei.link("Decco");
		ei.move(dir, 1);
		S.sleep(500);
	}

	rule +!lloyd() {
		string var = dirModule.getTemp();
		dirModule.setDecco();
		string dir = dirModule.getLloyd();
		ei.link("Lloyd");
		ei.move(dir, 1);
		S.sleep(500);
	}
	rule +!harry() {
		string var = dirModule.getTemp();
		dirModule.setLloyd();
		string dir = dirModule.getHarry();
		ei.link("Harry");
		ei.move(dir, 1);
		S.sleep(500);
	}


}